[tool.poetry]
name = "article-rec-training-job"
version = "0.1.0"
description = "Code to define, run, and orchestrate the LNL article recommendation training job."
authors = ["LocalNewsLab <mh3287@columbia.edu>"]

[tool.poetry.dependencies]
# if this python version changes, the python base image in the Dockerfile needs to change too
python = "3.11.*"
google-cloud-bigquery = "^3.13.0"
loguru = "^0.7.2"
pandas = "^2.1.3"
db-dtypes = "^1.1.1"
pandera = "^0.17.2"
dacite = "^1.8.1"
article-rec-db = "0.0.10"
pydantic = "^2.5.2"
aiohttp = "^3.9.1"
nh3 = "^0.2.14"
tenacity = "^8.2.3"
sqlalchemy = "^2.0.23"
psycopg2 = "^2.9.9"
click = "^8.1.7"

[tool.poetry.group.dev.dependencies]
mypy = "^1.7.1"
pre-commit = "^3.5.0"
pytest = "^7.4.3"
pyyaml = "^6.0.1"
types-pyyaml = "^6.0.12.12"
pandas-stubs = "^2.1.1.230928"
pandera = {extras = ["mypy"], version = "^0.17.2"}
pydantic = {extras = ["mypy"], version = "^2.5.2"}
types-psycopg2 = "^2.9.21.20"
poethepoet = "^0.24.4"

[tool.mypy]
# documentation reference: https://mypy.readthedocs.io/en/stable/config_file.html
plugins = ["pydantic.mypy", "pandera.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
files = "app.py"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.black]
line-length = 122
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | cdk
)/
'''

[tool.isort]
profile = "black"

[tool.poe.tasks.start-local-postgres]
help = "Start a local Postgres instance"
shell = """
  docker run -d --rm --name postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_HOST_AUTH_METHOD=trust -p 127.0.0.1:5432:5432/tcp ankane/pgvector:v0.4.1
  until timeout 3 psql -h 127.0.0.1 -U postgres -c "select 1" -d postgres 2>&0>/dev/null
    do
      printf "Waiting 2 seconds for PostgreSQL to come up: %s@%s/%s...\n" postgres 127.0.0.1 postgres
      sleep 2;
    done
  python -c "\
    from sqlalchemy.engine import create_engine; \
    from sqlalchemy import text; \
    from article_rec_db.models import SQLModel; \
    engine = create_engine('postgresql://postgres:postgres@localhost:5432/postgres'); \
    context = engine.connect(); \
    conn = context.__enter__(); \
    conn.execute(text('CREATE EXTENSION IF NOT EXISTS vector')); \
    conn.commit(); \
    context.__exit__(None, None, None); \
    SQLModel.metadata.create_all(engine); \
    print('âœ… Postgres is up!')
  "
"""

[tool.poe.tasks.stop-local-postgres]
help = "Stop the local Postgres instance"
shell = "docker stop postgres"

[tool.poe.tasks.test-setup]
help = "Set up the test environment"
shell = "docker-compose -f tests/integration/compose.yaml up -d"

[tool.poe.tasks.test-teardown]
help = "Tear down the test environment"
shell = "docker-compose -f tests/integration/compose.yaml down"

[tool.poe.tasks.test]
help = "Run all tests, with setup and teardown"
shell = "poe test-setup && pytest tests; poe test-teardown"